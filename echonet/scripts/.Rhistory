setwd("~/ETH/Masterarbeit/multimodalecho/scripts")
# load output from echonet video function
data <- read.csv(file.path(resultsDir, "echonet_video", "test_predictions.csv"), header = FALSE)
library(ggplot2)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
data
ActualNumbers
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
View(ActualNumbers)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
View(ActualNumbers)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
View(ActualNumbers)
View(dataNoAugmentation)
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
library(reshape2)
library(scales)
library(ggthemes)
library(Metrics)
# set results directory
resultsDir <- "../output"
# load output from echonet video function
data <- read.csv(file.path(resultsDir, "echonet_video", "test_predictions.csv"), header = FALSE)
str(data)
dataNoAugmentation <- data[data$V2 == 0,]
str(dataNoAugmentation)
dataGlobalAugmentation <- data %>% group_by(V1) %>% summarize(meanPrediction = mean(V3), sdPred = sd(V3))
str(dataGlobalAugmentation)
# load output from echonet segmentation function
sizeData <- read.csv(file.path(resultsDir, "echonet_segmentation", "size.csv"))
sizeData <- sizeData[sizeData$ComputerSmall == 1,]
str(sizeData)
sizeRelevantFrames <- sizeData[c(1,2)]
sizeRelevantFrames$Frame <- sizeRelevantFrames$Frame - 32
sizeRelevantFrames[sizeRelevantFrames$Frame < 0,]$Frame <- 0
beatByBeat <- merge(sizeRelevantFrames, data, by.x = c("Filename", "Frame"), by.y = c("V1", "V2"))
beatByBeat <- beatByBeat %>% group_by(Filename) %>% summarize(meanPrediction = mean(V3), sdPred = sd(V3))
str(beatByBeat)
### For use, need to specify file directory
fileLocation <- "../../EchoNet-Dynamic/"
ActualNumbers <- read.csv(paste0(fileLocation, "FileList.csv", sep = ""))
ActualNumbers <- ActualNumbers[c(1,2)]
str(ActualNumbers)
View(dataNoAugmentation)
View(ActualNumbers)
View(sizeRelevantFrames)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
View(data)
View(dataGlobalAugmentation)
View(beatByBeat)
### For use, need to specify file directory
fileLocation <- "../../EchoNet-Dynamic/"
ActualNumbers <- read.csv(paste0(fileLocation, "FileList.csv", sep = ""))
ActualNumbers <- read.csv(file.path(fileLocation, "FileList.csv"))
ActualNumbers <- read.csv(file.path(fileLocation, "FileList.csv"), colClasses = c("FileName" = "string"))
ActualNumbers <- read.csv(file.path(fileLocation, "FileList.csv"), colClasses = c("FileName" = "character"))
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
View(dataNoAugmentation)
ActualNumbers[] <- Map(paste, FileName, ".avi")
### For use, need to specify file directory
fileLocation <- "../../EchoNet-Dynamic"
ActualNumbers <- read.csv(file.path(fileLocation, "FileList.csv"), colClasses = c("FileName" = "character"))
ActualNumbers <- ActualNumbers[c(1,2)]
ActualNumbers[] <- Map(paste, FileName, ".avi")
ActualNumbers[] <- lapply(FileName, function(x) paste(x, ".avi"))
ActualNumbers[] <- lapply(ActualNumbers["FileName"], function(x) paste(x, ".avi"))
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
ActualNumbers <- read.csv(file.path(fileLocation, "FileList.csv"), colClasses = c("FileName" = "character", "EF" = "numeric"))
ActualNumbers <- ActualNumbers[c(1,2)]
ActualNumbers[] <- lapply(ActualNumbers["FileName"], function(x) paste(x, ".avi"))
str(ActualNumbers)
dataNoAugmentation <- merge(dataNoAugmentation, ActualNumbers, by.x = "V1", by.y = "FileName", all.x = TRUE)
dataNoAugmentation$AbsErr <- abs(dataNoAugmentation$V3 - dataNoAugmentation$EF)
View(dataNoAugmentation)
library(ggplot2)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
library(reshape2)
library(scales)
library(ggthemes)
library(Metrics)
# set results directory
resultsDir <- "../output"
# load output from echonet video function
data <- read.csv(file.path(resultsDir, "echonet_video", "test_predictions.csv"), header = FALSE)
str(data)
dataNoAugmentation <- data[data$V2 == 0,]
str(dataNoAugmentation)
dataGlobalAugmentation <- data %>% group_by(V1) %>% summarize(meanPrediction = mean(V3), sdPred = sd(V3))
str(dataGlobalAugmentation)
# load output from echonet segmentation function
sizeData <- read.csv(file.path(resultsDir, "echonet_segmentation", "size.csv"))
sizeData <- sizeData[sizeData$ComputerSmall == 1,]
str(sizeData)
sizeRelevantFrames <- sizeData[c(1,2)]
sizeRelevantFrames$Frame <- sizeRelevantFrames$Frame - 32
sizeRelevantFrames[sizeRelevantFrames$Frame < 0,]$Frame <- 0
beatByBeat <- merge(sizeRelevantFrames, data, by.x = c("FileName", "Frame"), by.y = c("V1", "V2"))
beatByBeat <- beatByBeat %>% group_by(FileName) %>% summarize(meanPrediction = mean(V3), sdPred = sd(V3))
str(beatByBeat)
### For use, need to specify file directory
fileLocation <- "../../EchoNet-Dynamic"
ActualNumbers <- read.csv(file.path(fileLocation, "FileList.csv"), colClasses = c("FileName" = "character", "EF" = "numeric"))
ActualNumbers <- ActualNumbers[c(1,2)]
ActualNumbers[] <- lapply(ActualNumbers["FileName"], function(x) paste(x, ".avi"))
str(ActualNumbers)
dataNoAugmentation <- merge(dataNoAugmentation, ActualNumbers, by.x = "V1", by.y = "FileName", all.x = TRUE)
### For use, need to specify file directory
fileLocation <- "../../EchoNet-Dynamic"
ActualNumbers <- read.csv(file.path(fileLocation, "FileList.csv"), colClasses = c("FileName" = "character"))
ActualNumbers <- ActualNumbers[c(1,2)]
ActualNumbers[] <- lapply(ActualNumbers["FileName"], function(x) paste(x, ".avi"))
str(ActualNumbers)
ActualNumbers <- read.csv(file.path(fileLocation, "FileList.csv"), colClasses = c("FileName" = "character"))
ActualNumbers <- ActualNumbers[c(1,2)]
ActualNumbers["FileName"] <- lapply(ActualNumbers["FileName"], function(x) paste(x, ".avi"))
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
library(ggplot2)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
library(reshape2)
library(scales)
library(ggthemes)
library(Metrics)
# set results directory
resultsDir <- "../output"
# load output from echonet video function
data <- read.csv(file.path(resultsDir, "echonet_video", "test_predictions.csv"), header = FALSE)
str(data)
dataNoAugmentation <- data[data$V2 == 0,]
str(dataNoAugmentation)
dataGlobalAugmentation <- data %>% group_by(V1) %>% summarize(meanPrediction = mean(V3), sdPred = sd(V3))
str(dataGlobalAugmentation)
# load output from echonet segmentation function
sizeData <- read.csv(file.path(resultsDir, "echonet_segmentation", "size.csv"))
sizeData <- sizeData[sizeData$ComputerSmall == 1,]
str(sizeData)
sizeRelevantFrames <- sizeData[c(1,2)]
sizeRelevantFrames$Frame <- sizeRelevantFrames$Frame - 32
sizeRelevantFrames[sizeRelevantFrames$Frame < 0,]$Frame <- 0
beatByBeat <- merge(sizeRelevantFrames, data, by.x = c("FileName", "Frame"), by.y = c("V1", "V2"))
beatByBeat <- beatByBeat %>% group_by(FileName) %>% summarize(meanPrediction = mean(V3), sdPred = sd(V3))
str(beatByBeat)
### For use, need to specify file directory
fileLocation <- "../../EchoNet-Dynamic"
ActualNumbers <- read.csv(file.path(fileLocation, "FileList.csv"), colClasses = c("FileName" = "character"))
ActualNumbers <- ActualNumbers[c(1,2)]
ActualNumbers["FileName"] <- lapply(ActualNumbers["FileName"], function(x) paste(x, ".avi"))
str(ActualNumbers)
ActualNumbers["FileName"] <- lapply(ActualNumbers["FileName"], function(x) paste(x, ".avi", sep = ""))
str(ActualNumbers)
dataNoAugmentation <- merge(dataNoAugmentation, ActualNumbers, by.x = "V1", by.y = "FileName", all.x = TRUE)
dataNoAugmentation$AbsErr <- abs(dataNoAugmentation$V3 - dataNoAugmentation$EF)
str(dataNoAugmentation)
library(ggplot2)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
library(reshape2)
library(scales)
library(ggthemes)
library(Metrics)
# set results directory
resultsDir <- "../output"
# load output from echonet video function
data <- read.csv(file.path(resultsDir, "echonet_video", "test_predictions.csv"), header = FALSE)
str(data)
dataNoAugmentation <- data[data$V2 == 0,]
str(dataNoAugmentation)
dataGlobalAugmentation <- data %>% group_by(V1) %>% summarize(meanPrediction = mean(V3), sdPred = sd(V3))
str(dataGlobalAugmentation)
# load output from echonet segmentation function
sizeData <- read.csv(file.path(resultsDir, "echonet_segmentation", "size.csv"))
sizeData <- sizeData[sizeData$ComputerSmall == 1,]
str(sizeData)
sizeRelevantFrames <- sizeData[c(1,2)]
sizeRelevantFrames$Frame <- sizeRelevantFrames$Frame - 32
sizeRelevantFrames[sizeRelevantFrames$Frame < 0,]$Frame <- 0
beatByBeat <- merge(sizeRelevantFrames, data, by.x = c("FileName", "Frame"), by.y = c("V1", "V2"))
beatByBeat <- beatByBeat %>% group_by(FileName) %>% summarize(meanPrediction = mean(V3), sdPred = sd(V3))
str(beatByBeat)
### For use, need to specify file directory
fileLocation <- "../../EchoNet-Dynamic"
ActualNumbers <- read.csv(file.path(fileLocation, "FileList.csv"), colClasses = c("FileName" = "character"))
ActualNumbers <- ActualNumbers[c(1,2)]
ActualNumbers["FileName"] <- lapply(ActualNumbers["FileName"], function(x) paste(x, ".avi", sep = ""))
str(ActualNumbers)
dataNoAugmentation <- merge(dataNoAugmentation, ActualNumbers, by.x = "V1", by.y = "FileName", all.x = TRUE)
dataNoAugmentation$AbsErr <- abs(dataNoAugmentation$V3 - dataNoAugmentation$EF)
str(dataNoAugmentation)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis_no_segmentation.R', echo=TRUE)
library(ggplot2)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
library(reshape2)
library(scales)
library(ggthemes)
library(Metrics)
# set results directory
resultsDir <- "../output"
# load output from echonet video function
data <- read.csv(file.path(resultsDir, "echonet_video_EDES", "test_predictions.csv"), header = FALSE)
str(data)
dataNoAugmentation <- data[data$V2 == 0,]
str(dataNoAugmentation)
dataGlobalAugmentation <- data %>% group_by(V1) %>% summarize(meanPrediction = mean(V3), sdPred = sd(V3))
str(dataGlobalAugmentation)
beatByBeat <- dataGlobalAugmentation
str(beatByBeat)
View(beatByBeat)
library(ggplot2)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
library(reshape2)
library(scales)
library(ggthemes)
library(Metrics)
# set results directory
resultsDir <- "../output"
# load output from echonet video function
data <- read.csv(file.path(resultsDir, "echonet_video_EDES", "test_predictions.csv"), header = FALSE)
str(data)
dataNoAugmentation <- data[data$V2 == 0,]
str(dataNoAugmentation)
dataGlobalAugmentation <- data %>% group_by(V1) %>% summarize(meanPrediction = mean(V3), sdPred = sd(V3))
str(dataGlobalAugmentation)
beatByBeat <- dataGlobalAugmentation
colnames(beatByBeat)[1] <- "FileName"
str(beatByBeat)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis_no_segmentation.R', echo=TRUE)
beatBoxPlot <- ggplot(data = MAEdata) + geom_boxplot(aes(x = sample, y = error, group = sample), outlier.shape = NA
) + theme_classic() + theme(legend.position = "none",
axis.text.y = element_text( size=7)) + xlab("Number of Sampled Beats") +
ylab("Mean Absolute Error") + ylim(c(4.35, 7.8)) +
scale_fill_brewer(palette = "Set1", direction = -1)
beatBoxPlot
beatBoxPlot <- ggplot(data = MAEdata) + geom_boxplot(aes(x = sample, y = error, group = sample), outlier.shape = NA
) + theme_classic() + theme(legend.position = "none",
axis.text.y = element_text( size=7)) + xlab("Number of Sampled Beats") +
ylab("Mean Absolute Error") + ylim(c(4, 8)) +
scale_fill_brewer(palette = "Set1", direction = -1)
beatBoxPlot
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
source('~/ETH/Masterarbeit/multimodalecho/scripts/beat_by_beat_analysis.R', echo=TRUE)
